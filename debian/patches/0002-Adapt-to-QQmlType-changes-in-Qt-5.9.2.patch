From e6afa652978d20ea520f03a3806951cd783dc4bd Mon Sep 17 00:00:00 2001
From: Volker Krause <volker.krause@kdab.com>
Date: Wed, 9 Aug 2017 11:20:54 +0200
Subject: [PATCH] Adapt to QQmlType changes in Qt 5.9.2

---
 plugins/qmlsupport/qmlattachedpropertyadaptor.cpp |  5 +-
 plugins/qmlsupport/qmlsupport.cpp                 | 26 ++++---
 plugins/qmlsupport/qmltypeextension.cpp           |  9 +--
 plugins/qmlsupport/qmltypeutil.h                  | 82 +++++++++++++++++++++++
 4 files changed, 105 insertions(+), 17 deletions(-)
 create mode 100644 plugins/qmlsupport/qmltypeutil.h

diff --git a/plugins/qmlsupport/qmlattachedpropertyadaptor.cpp b/plugins/qmlsupport/qmlattachedpropertyadaptor.cpp
index 0b451ef8..65f6cc94 100644
--- a/plugins/qmlsupport/qmlattachedpropertyadaptor.cpp
+++ b/plugins/qmlsupport/qmlattachedpropertyadaptor.cpp
@@ -27,6 +27,7 @@
 */
 
 #include "qmlattachedpropertyadaptor.h"
+#include "qmltypeutil.h"
 
 #include <core/propertydata.h>
 
@@ -81,8 +82,8 @@ PropertyData QmlAttachedPropertyAdaptor::propertyData(int index) const
         return pd;
 
     auto qmlType = QQmlMetaType::qmlType(it.value()->metaObject());
-    if (qmlType && !qmlType->elementName().isEmpty())
-        pd.setName(qmlType->elementName());
+    if (QmlType::isValid(qmlType) && !QmlType::callable(qmlType)->elementName().isEmpty())
+        pd.setName(QmlType::callable(qmlType)->elementName());
     else
         pd.setName(it.value()->metaObject()->className());
 
diff --git a/plugins/qmlsupport/qmlsupport.cpp b/plugins/qmlsupport/qmlsupport.cpp
index bc175883..565f03a4 100644
--- a/plugins/qmlsupport/qmlsupport.cpp
+++ b/plugins/qmlsupport/qmlsupport.cpp
@@ -33,6 +33,7 @@
 #include "qmlcontextpropertyadaptor.h"
 #include "qmlcontextextension.h"
 #include "qmltypeextension.h"
+#include "qmltypeutil.h"
 
 #include <core/metaobject.h>
 #include <core/metaobjectrepository.h>
@@ -200,8 +201,8 @@ QString QmlObjectDataProvider::typeName(QObject *obj) const
     auto qmlType = QQmlMetaType::qmlType(obj->metaObject());
     // QQC2 has some weird types with only the namespace (that is, ending in '/')
     // we get better results below, so ignore this case here
-    if (qmlType && !qmlType->qmlTypeName().endsWith(QLatin1Char('/')))
-        return qmlType->qmlTypeName();
+    if (QmlType::isValid(qmlType) && !QmlType::callable(qmlType)->qmlTypeName().endsWith(QLatin1Char('/')))
+        return QmlType::callable(qmlType)->qmlTypeName();
 
     // QML defined type
 #if QT_VERSION >= QT_VERSION_CHECK(5, 4, 0)
@@ -217,12 +218,10 @@ QString QmlObjectDataProvider::typeName(QObject *obj) const
 
     qmlType = QQmlMetaType::qmlType(data->compilationUnit->url());
 #endif
-    if (qmlType) {
+    if (QmlType::isValid(qmlType)) {
         // we get the same type for top-level types and inline types, with no known way to tell those apart...
-        if (QString::fromLatin1(obj->metaObject()->className()).startsWith(qmlType->qmlTypeName()
-                                                                           + QStringLiteral(
-                                                                               "_QMLTYPE_")))
-            return qmlType->qmlTypeName();
+        if (QString::fromLatin1(obj->metaObject()->className()).startsWith(QmlType::callable(qmlType)->qmlTypeName() + QStringLiteral("_QMLTYPE_")))
+            return QmlType::callable(qmlType)->qmlTypeName();
     }
 #endif
     return QString();
@@ -265,8 +264,8 @@ SourceLocation QmlObjectDataProvider::declarationLocation(QObject *obj) const
 
     // C++ QML type
     auto qmlType = QQmlMetaType::qmlType(obj->metaObject());
-    if (qmlType)
-        return SourceLocation(qmlType->sourceUrl());
+    if (QmlType::isValid(qmlType))
+        return SourceLocation(QmlType::callable(qmlType)->sourceUrl());
 
     // QML-defined type
 #if QT_VERSION >= QT_VERSION_CHECK(5, 4, 0)
@@ -282,8 +281,8 @@ SourceLocation QmlObjectDataProvider::declarationLocation(QObject *obj) const
 
     qmlType = QQmlMetaType::qmlType(data->compilationUnit->url());
 #endif
-    if (qmlType)
-        return SourceLocation(qmlType->sourceUrl());
+    if (QmlType::isValid(qmlType))
+        return SourceLocation(QmlType::callable(qmlType)->sourceUrl());
 #endif
     return SourceLocation();
 }
@@ -321,8 +320,13 @@ QmlSupport::QmlSupport(GammaRay::ProbeInterface *probe, QObject *parent)
 
     MO_ADD_METAOBJECT0(QQmlType);
     MO_ADD_PROPERTY_RO(QQmlType, QByteArray, typeName);
+#if QT_VERSION < QT_VERSION_CHECK(5, 9, 2)
     MO_ADD_PROPERTY_RO(QQmlType, const QString &, qmlTypeName);
     MO_ADD_PROPERTY_RO(QQmlType, const QString &, elementName);
+#else
+    MO_ADD_PROPERTY_RO(QQmlType, QString, qmlTypeName);
+    MO_ADD_PROPERTY_RO(QQmlType, QString, elementName);
+#endif
     MO_ADD_PROPERTY_RO(QQmlType, int, majorVersion);
     MO_ADD_PROPERTY_RO(QQmlType, int, minorVersion);
     MO_ADD_PROPERTY_RO(QQmlType, int, createSize);
diff --git a/plugins/qmlsupport/qmltypeextension.cpp b/plugins/qmlsupport/qmltypeextension.cpp
index a0ed276e..830f6bfb 100644
--- a/plugins/qmlsupport/qmltypeextension.cpp
+++ b/plugins/qmlsupport/qmltypeextension.cpp
@@ -27,6 +27,7 @@
 */
 
 #include "qmltypeextension.h"
+#include "qmltypeutil.h"
 
 #include <core/aggregatedpropertymodel.h>
 #include <core/objectinstance.h>
@@ -75,10 +76,10 @@ bool QmlTypeExtension::setQObject(QObject *object)
 
     const auto qmlType = QQmlMetaType::qmlType(data->compilationUnit->url());
 #endif
-    if (!qmlType)
+    if (!QmlType::isValid(qmlType))
         return false;
 
-    m_typePropertyModel->setObject(ObjectInstance(qmlType, "QQmlType"));
+    m_typePropertyModel->setObject(QmlType::toObjectInstance(qmlType));
     return true;
 #else
     return false;
@@ -91,9 +92,9 @@ bool QmlTypeExtension::setMetaObject(const QMetaObject *metaObject)
         return false;
 
     const auto qmlType = QQmlMetaType::qmlType(metaObject);
-    if (!qmlType)
+    if (!QmlType::isValid(qmlType))
         return false;
 
-    m_typePropertyModel->setObject(ObjectInstance(qmlType, "QQmlType"));
+    m_typePropertyModel->setObject(QmlType::toObjectInstance(qmlType));
     return true;
 }
diff --git a/plugins/qmlsupport/qmltypeutil.h b/plugins/qmlsupport/qmltypeutil.h
new file mode 100644
index 00000000..b5c6cf6d
--- /dev/null
+++ b/plugins/qmlsupport/qmltypeutil.h
@@ -0,0 +1,82 @@
+/*
+  qmltypeutil.h
+
+  This file is part of GammaRay, the Qt application inspection and
+  manipulation tool.
+
+  Copyright (C) 2017 Klar√§lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com
+  Author: Volker Krause <volker.krause@kdab.com>
+
+  Licensees holding valid commercial KDAB GammaRay licenses may use this file in
+  accordance with GammaRay Commercial License Agreement provided with the Software.
+
+  Contact info@kdab.com if any conditions of this licensing are not clear to you.
+
+  This program is free software; you can redistribute it and/or modify
+  it under the terms of the GNU General Public License as published by
+  the Free Software Foundation, either version 2 of the License, or
+  (at your option) any later version.
+
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#ifndef QMLTYPEUTIL_H
+#define QMLTYPEUTIL_H
+
+#include <core/objectinstance.h>
+
+#include <private/qqmlmetatype_p.h>
+#if QT_VERSION >= QT_VERSION_CHECK(5, 9, 2)
+Q_DECLARE_METATYPE(QQmlType)
+#endif
+
+namespace GammaRay {
+
+/** Helper functions to deal with QQmlType changing from pointer to value type in Qt 5.9.2 */
+namespace QmlType {
+
+inline bool isValid(QQmlType *type)
+{
+    return type;
+}
+
+#if QT_VERSION >= QT_VERSION_CHECK(5, 9, 2)
+inline bool isValid(const QQmlType &type)
+{
+    return type.isValid();
+}
+#endif
+
+inline QQmlType* callable(QQmlType *type)
+{
+    return type;
+}
+
+inline const QQmlType* callable(const QQmlType &type)
+{
+    return &type;
+}
+
+inline ObjectInstance toObjectInstance(QQmlType *type)
+{
+    return ObjectInstance(type, "QQmlType");
+}
+
+#if QT_VERSION >= QT_VERSION_CHECK(5, 9, 2)
+inline ObjectInstance toObjectInstance(const QQmlType &type)
+{
+    return ObjectInstance(QVariant::fromValue(type));
+}
+#endif
+
+}
+
+}
+
+#endif
-- 
2.14.1

